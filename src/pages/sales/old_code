import { Tabs,Checkbox, message, Space, Col, Row, List, Typography, InputNumber, Form, Input, Divider, Button, Table, AutoComplete, Select, Badge} from 'antd'
import { DeleteFilled } from '@ant-design/icons';
import { useQuery, useMutation } from '@tanstack/react-query'
import { getProductsWithStockBalance } from '../../services/ProductsAPI'

import { useAuthToken } from '../../hooks/auth'
import { ServerResponse } from '../../interfaces/Server'
import { IProductWithBalance } from '../../interfaces/Product'
import { useEffect, useState } from 'react'
import { ICustomer, ICustomerReturnEmpties } from '../../interfaces/Customer'
import { pay, printReceipt as print } from '../../services/SalesAPI'
import { IOrder, ISaleItem } from '../../interfaces/Sale';
import dayjs from 'dayjs';
import {useLocation} from 'react-router-dom';
import { useNavigate } from 'react-router-dom';
import * as constants from "../../utils/constants";
import "./sales.css";
import POS_HelpInfo from './POS_partials/POS_HelpInfo';
import VSE_Loadout from './POS_partials/VSE_loadout';
import POS_Customer from './POS_partials/POS_Customer';
import VSE_Return from './POS_partials/VSE_Return';
import POS_Customer_Edit_sale from './POS_partials/POS_Customer_Edit_Sale';


const POS = () => {
    const authToken = useAuthToken();
    const location = useLocation();
    const navigate = useNavigate();
    
    const [products, setProducts] = useState<IProductWithBalance[]>([]);
    
    const [emptiesBalance, setEmptiesBalance] = useState<number>(0);
    const [unitPrice, setUnitPrice] = useState<number>(0);
    const [quantity, setQuantity] = useState<number>(1);
    const [total, setTotal] = useState<number>(0);
    const [amountTendered, setAmountTendered] = useState<number>(0);
    const [paymentType, setPaymentType] = useState<string>("Cash");
    const [messageApi, contextHolder] = message.useMessage();
    const [selectedProduct, setSelectedProduct] = useState<IProductWithBalance | undefined>();
    const [tableContent, setTableContent] = useState<ISaleItem[]>(location.state?.sales ?? []); // [{sku_code: "sku_code", product: "product", quantity: 1, price: 0.00}]
    
    const { data: productsData } = useQuery<ServerResponse<IProductWithBalance[]>, Error>(
        ['products_all'],
        () => getProductsWithStockBalance(authToken ?? "")
    );

    useEffect(() => {

        if (productsData) {
            setProducts(productsData.data)
        }

    },[productsData]);

    useEffect(() => {

        if (tableContent) {
            setTotal(tableContent.reduce((acc, item) => acc + (item.quantity * (item.product.retail_price ?? 0)), 0));
        }

    },[tableContent])

    useEffect(() => {
        if (customer) {
            if (typeof customer.customer_empties_account === 'undefined') {
                setEmptiesBalance(0);
                return
            }

            const emptiesBalance = customer.customer_empties_account.reduce((acc: number, customerEmptiesInfo: ICustomerReturnEmpties) => {
                if (customerEmptiesInfo.transaction_type === 'in')
                    return acc + customerEmptiesInfo.quantity_transacted;
                return acc - customerEmptiesInfo.quantity_transacted;
            }, 0);
            
            setEmptiesBalance(emptiesBalance);
        }else {
            setEmptiesBalance(0);
        }
    }, [customer]);

    

    const [_, setVSECustomer] = useState<ICustomer|undefined>(undefined)
    const onVseChange = (_: string, option: ICustomer) => {
        setVSECustomer(option)
    }

    const onProductChange = (_: string, option: IProductWithBalance) => {
        if (typeof option === 'undefined') {
            return;
        }
        
        setSelectedProduct(option);
        
        if (customer && customer.customer_type === 'wholesaler') {
            form.setFieldValue("unit_price", option.wholesale_price);
            setUnitPrice(typeof option.wholesale_price === 'undefined' ? 0 : option.wholesale_price);
        }else{
            form.setFieldValue("unit_price", option.retail_price);
            setUnitPrice(typeof option.retail_price === 'undefined' ? 0 : option.retail_price);
        }
        
    };
      
    const onSearch = (value: string) => {
        console.log('searching ...:', value);
    };

    const formClear = () => {
        form.resetFields();
        setUnitPrice(0);
        setQuantity(1);
        setSelectedProduct(undefined);
    }

    const savePurchase = () => {

        if (!selectedProduct || typeof selectedProduct === 'undefined' || typeof form.getFieldValue("product") === 'undefined') {
            messageApi.open({
                type: 'error',
                content: "Please select a product"
            });
            return;
        }

        if (typeof form.getFieldValue("quantity") === 'undefined') {
            messageApi.open({
                type: 'error',
                content: "Please enter a quantity"
            });
            return;
        }

        const product = selectedProduct;
        const quantity = form.getFieldValue("quantity");
        const unitPrice = form.getFieldValue("unit_price");

        if (!customer) {
            messageApi.open({
                type: 'error',
                content: "Please Choose a customer!"
            });
            return;
        }

        if (product.empty_returnable && customer.customer_type !== 'wholesaler') {
            if (emptiesBalance < quantity) { 
                messageApi.open({
                    type: 'error',
                    content: "Customer does not have enough empties to make this purchase"
                });
                return;
            }
        }

        if (typeof product !== 'undefined') {
            setTableContent([{id: product.id, product: product, quantity: quantity, key: product.id} as ISaleItem, ...tableContent]);
        }

        if (product.empty_returnable) updateCustomerEmptiesBalance(-quantity);

        form.resetFields();
        (unitPrice || unitPrice > 0) && setUnitPrice(0);
        form.setFieldValue("customer", `${customer?.name} (${customer?.customer_type.toUpperCase()})`);

    }

    const updateCustomerEmptiesBalance = (quantity: number) => {
        setEmptiesBalance((prev) => prev + quantity)
    }

    const removePOSItem = (record: ISaleItem) => {
        setTableContent( (prev) => prev.filter((item) => item.id !== record.id) )
        if (record.product.empty_returnable) updateCustomerEmptiesBalance(record.quantity);
    }

    const saveAndPrint = () => {
        console.log("save and print");
        const saleItems = tableContent.map((item) => ({
            key: item.id,
            product: item.product,
            quantity: item.quantity,
        } as ISaleItem));

        console.log("saleItems: ", saleItems)

        const order = {
            paymentType: paymentType,
            customer: customer,
            saleItems: saleItems,
            total: total,
            amountTendered: 0,
            balance: -total,
            date: dayjs().format('YYYY-MM-DD')
        } as IOrder;

        messageApi.open({
            type: 'success',
            content: "Order successful"
        });
        mutate(order);
        posReset();
    }

    const handlePay = () => {
        if (amountTendered < total) {
            messageApi.open({
                type: 'error',
                content: "Amount tendered is less than total"
            });
            return;
        }

        const saleItems = tableContent.map((item) => ({
            key: item.id,
            product: item.product,
            quantity: item.quantity,
        } as ISaleItem));

        const order = {
            paymentType: paymentType,
            customer: customer,
            saleItems: saleItems,
            total: total,
            amountTendered: amountTendered,
            balance: amountTendered - total,
            date: dayjs().format('YYYY-MM-DD'),
            order_transaction_id: location.state?.transaction_id
        } as IOrder;

        mutate(order);

        messageApi.open({
            type: 'success',
            content: "Payment successful"
        });

    }

    const resetStates = () => {
        setTableContent([]);
        setAmountTendered(0);
    }

    const posReset = () => {
        resetStates();
        formClear();
        
    }

    const onProductClicked = (product: IProductWithBalance) => {
        onProductChange(product.sku_name, product);
    }

    const [isVseAssistedSale, setIsVSEAssistedSale] = useState<boolean>(false);
    const onCheckedVSEAssistedSale = ( e: { target: { checked: boolean; }; } ) => {
        setIsVSEAssistedSale(e.target.checked)
    }

    

    useEffect(() => {

        form.setFieldValue("product", selectedProduct?.sku_name);

    },[selectedProduct])

    return (
        <>
            {contextHolder}
            <Typography.Title level={2}> {!location.state ? "Point of Sale" : "Order Checkout"}</Typography.Title>
            <POS_HelpInfo />
            <Row>
                {!location.state &&
                
                }

                <Col style={{marginLeft: "1rem"}}>
                    
                        
                        { !location.state &&
                        <Badge.Ribbon text={`Empties Balance: ${emptiesBalance}`} color={emptiesBalance > 0 ? "green" : "red"}>
                        <div style={{
                            borderStyle: "solid",
                            borderWidth: "1px",
                            borderRadius: 10,
                            borderColor: "#D9D9D9",
                            backgroundColor: "#f3f1f1",
                            width: "45vw",
                        }}>
                             

                            <Tabs 
                                defaultActiveKey='1'
                                size={'small'}
                                items={[
                                    {
                                        label: 'Customer',
                                        key: '1',
                                        children: <POS_Customer />
                                    },
                                    {
                                        label: 'VSE Loadout',
                                        key: '2',
                                        children: <VSE_Loadout />
                                    },
                                    {
                                        label: 'VSE Return',
                                        key: '3',
                                        children: <VSE_Return />
                                    },
                                    {
                                        label: 'Customer Modify Sale',
                                        key: '4',
                                        children: <POS_Customer_Edit_sale />
                                    },

                                ]}
                            /> 
                            
                            <Form.Item label="Choose Customer" name="customer" style={{ marginBottom: "10px" }} hidden={isVseAssistedSale}>
                                <AutoComplete 
                                    allowClear={true}
                                    bordered={false}
                                    onSelect={(text: string, option: ICustomer) => onCustomerChange(text, option)}
                                    placeholder="Search for Customer"
                                    options={ customersResponse?.data.map(custmr => ({...custmr, value: `${custmr.name} (${custmr.customer_type.toUpperCase()})`})) }
                                    filterOption={(inputValue, option) =>
                                        option!.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1
                                        }
                                />
                            </Form.Item>
                            <Checkbox onChange={onCheckedVSEAssistedSale} style={{ marginBottom: "10px" }}>VSE Loadout</Checkbox>
                            {
                            isVseAssistedSale && 
                                <Form.Item label="Select VSE" style={{ marginBottom: "10px" }}>
                                    <AutoComplete 
                                        allowClear={true}
                                        bordered={false}
                                        onSelect={(text: string, option: ICustomer) => onVseChange(text, option)}
                                        placeholder="Search for VSE"
                                        options={ customersResponse?.data.map(custmr => ({...custmr, value: `${custmr.name} (${custmr.customer_type.toUpperCase()})`})).filter(custmr => custmr.customer_type === constants.RETAILER_VSE) }
                                        filterOption={(inputValue, option) =>
                                            option!.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1
                                            }
                                    />
                                </Form.Item>
                            }
                            
                                
                                
                                <hr />
                                <div
                                    style={{
                                        display: "flex",
                                        justifyContent: "space-between"
                                    }}
                                >
                                    <Form.Item name={"unit_price"} label={`Unit Price: ${typeof unitPrice === 'undefined'? "0.00" : unitPrice} GHC`}>
                                        <Input placeholder="Unit Price" value={unitPrice} readOnly/>
                                    </Form.Item>
                                    <Form.Item label="Quantity:" name="quantity">
                                        <InputNumber min={1} onChange={(val) => setQuantity( val === null ? 1 : val  )}/>
                                    </Form.Item>
                                    <Form.Item label="Price">
                                        <Typography className="ant-form-text">{(unitPrice * quantity).toFixed(2)} GHC</Typography>
                                    </Form.Item>
                                </div>
                                <Space wrap>
                                    <Button size={"large"} type="primary" onClick={savePurchase} disabled={(typeof selectedProduct === 'undefined') } >Save</Button>
                                    <Button size={"large"} onClick={() => formClear()}>Clear</Button>
                                </Space>
                            </Form>
                        </div>
                        </Badge.Ribbon>
                        }
                        
                        <div style={{
                            borderStyle: "solid",
                            borderWidth: "1px",
                            borderRadius: 10,
                            borderColor: "#D9D9D9",
                            height: "30vh",
                            marginTop: 10,
                            width: "45vw",
                        }}>

                            

                        </div>
                        
                    
                </Col>
                <Col span={5}>
                    <div style={{
                        borderStyle: "solid",
                        borderWidth: "1px",
                        borderRadius: 10,
                        borderColor: "#D9D9D9",
                        backgroundColor: "#F5F5F5FF",
                        marginLeft: 5,
                        paddingBottom: 35,
                        width: "100%",
                    }}
                    >
                        <div style={{display: 'flex', flexDirection: 'column', marginTop: "1rem"}}>
                            {
                                location.state &&
                                <Typography.Title level={5} style={{marginLeft: "1rem"}}>
                                    Customer: {location.state.customer.name}<br />
                                </Typography.Title>
                            }
                            <Typography.Title level={5} style={{marginLeft: "1rem"}}>
                                OrderID: <br />
                            <Typography.Text strong style={{marginLeft: "1rem"}}>{location.state?.transaction_id}</Typography.Text>
                            </Typography.Title>
                            <Divider orientation="left" >Purchase Summary</Divider>
                            <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginRight: "1rem", marginLeft: "1rem"}}>
                                <Typography.Text strong style={{marginRight: 10}}>Quantity: </Typography.Text>
                                <Typography.Text strong >{ tableContent.reduce((acc, item) => (acc + item.quantity), 0) }</Typography.Text>
                            </div>

                            <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginRight: "1rem", marginLeft: "1rem"}}>
                                <Typography.Text strong style={{marginRight: 10}}>Subtotal: </Typography.Text>
                                <Typography.Text strong>0.00 GHC</Typography.Text>
                            </div>

                            <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginRight: "1rem", marginLeft: "1rem"}}>
                                <Typography.Text strong style={{ fontSize: '1.5rem'}}>Total: </Typography.Text>
                                <Typography.Text strong style={{ fontSize: '1.5rem' }}>{ total.toFixed(2) } GHC</Typography.Text>
                            </div>
                            <Divider></Divider>
                            <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginRight: "1rem", marginLeft: "1rem"}}>
                                <Typography.Text strong style={{ fontSize: '1em'}}>Payment Type </Typography.Text>
                                <Select size={"large"} dropdownMatchSelectWidth={false} placement={'bottomRight'} defaultValue={paymentType} options={[
                                    {value:"cash", label: 'Cash'}, 
                                    {value:"mobile-money", label: 'Mobile Money'},
                                    {value:"cheque", label: 'Cheque'},
                                    {value:"bank-transfer", label: 'Bank Transfer'}
                                    ]} onChange={(value) =>setPaymentType(value)}/>
                            </div>

                            {
                                location.state !== null &&
                                <div style={{display: 'flex', alignItems: 'center', flexDirection: 'row', justifyContent: 'space-between', marginRight: "1rem", marginLeft: "1rem", marginTop: 10}}>
                                    <Typography.Text strong style={{ fontSize: '1em'}}>Amount Tendered </Typography.Text>
                                    <InputNumber size="large" style={{width: '50%'}} placeholder='0.00' addonAfter="GHs" value={amountTendered} onChange={(val) => val && setAmountTendered(val)}/>
                                </div>
                            }
                            <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginRight: "1rem", marginLeft: "1rem", marginTop: 10}}>
                                {
                                    location.state !== null &&
                                    <>
                                        <Typography.Text strong style={{ fontSize: '1em'}}>Balance </Typography.Text>
                                        <Typography.Text strong style={{ fontSize: '1em' }}>{ amountTendered - total } GHs</Typography.Text>
                                    </>
                                }
                            </div>

                            <div style={{display: 'flex', justifyContent:'center'}}>
                                {
                                    location.state !== null // if location.state is not null, then we are in POS mode because an order has been made
                                    ? (<Button type="primary" size="large" style={{width: "90%", marginTop: "1rem"}} onClick={handlePay} disabled={amountTendered < total || total === 0}>Pay</Button>) 
                                    :
                                    (<Button type="primary" size="large" style={{width: "90%", marginTop: "1rem"}} onClick={saveAndPrint} disabled={total === 0}>Save and Print</Button>)

                                }
                            </div>
                        </div>
                    </div>
                </Col>
            </Row>
        </>
    )
}

export default POS;